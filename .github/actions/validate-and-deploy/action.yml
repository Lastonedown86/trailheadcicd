name: "Validate and Deploy Salesforce Metadata"
description: "Composite action to validate and deploy metadata"

inputs:
  DRY_RUN:
    description: "Validate deploy and run Apex tests but don't save to the org."
  TEST_LEVEL:
    description: "Deployment Apex testing level."
    default: RunLocalTests
  WAIT:
    description: "Number of minutes to wait for command to complete and display results."
    default: "10"
  SFDX_AUTH_URL:
    description: "The auth url tied to your deployment environment"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install Salesforce CLI
      shell: bash
      run: |
        npm install -g @salesforce/cli
        sf --version
    - name: Installing sfdx git delta
      shell: bash
      run: |
        echo y | sf plugins install sfdx-git-delta
        sf plugins
    - name: Login to Environment
      shell: bash
      run: |
        sf org login sfdx-url --set-default --sfdx-url-file <(echo "${{ inputs.SFDX_AUTH_URL }}")
    - name: Create delta packages for new, modified or deleted metadata
      shell: bash
      run: |
        mkdir changed-sources
        sf sgd:source:delta --from "HEAD~1" --output-dir changed-sources/ --generate-delta --source-dir force-app/
    - name: Upload changed-sources folder as artifact
      uses: actions/upload-artifact@v4
      with:
        name: changed-sources
        path: changed-sources
    - name: Deploy to Environment
      shell: bash
      run: |
        deployFlags=(
          --manifest changed-sources/package/package.xml
          --post-destructive-changes changed-sources/destructiveChanges/destructiveChanges.xml
          --wait ${{ inputs.WAIT }}
          --test-level ${{ inputs.TEST_LEVEL }}
          --verbose
          )
        if [ "${{ inputs.DRY_RUN }}" = "true" ]; then
           deployFlags+=( --dry-run )
        sf project deploy start "${deployFlags[@]}"